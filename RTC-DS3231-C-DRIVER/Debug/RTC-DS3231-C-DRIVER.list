
RTC-DS3231-C-DRIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000740  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080008e8  080008e8  000108e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080008f0  080008f0  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  080008f0  080008f0  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008f0  080008f0  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008f0  080008f0  000108f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080008f4  080008f4  000108f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  080008f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020040  2**0
                  CONTENTS
 10 .bss          00000038  20000040  20000040  00020040  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000078  20000078  00020040  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000006ff  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002ba  00000000  00000000  0002076f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  00020a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000098  00000000  00000000  00020af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000010a3  00000000  00000000  00020b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c06  00000000  00000000  00021c2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000440a  00000000  00000000  00022831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00026c3b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000210  00000000  00000000  00026c8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000040 	.word	0x20000040
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080008d0 	.word	0x080008d0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000044 	.word	0x20000044
 80001e4:	080008d0 	.word	0x080008d0

080001e8 <rtc_getTime>:
/**
 * @brief: Function to extract the time measured by RTC DS3231 Module
 * @author: LorisRT
 */
rtc_ds3231_status_e rtc_getTime(time_t *t)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	 * address that is read is the last one stored in the register pointer".
	 * For that reason, the RTC DS3231 register pointer is initialised
	 * to the first register (00h) before performing a stream read to be sure
	 * that the correct data format is saved in the buffer_RTC_DS3231 variable
     */
	if (STM_I2C_OK != DS3231_I2C_writePointer(RTC_REG_SEC))
 80001f0:	2000      	movs	r0, #0
 80001f2:	f000 f905 	bl	8000400 <DS3231_I2C_writePointer>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d001      	beq.n	8000200 <rtc_getTime+0x18>
	{
		return RTC_ERROR;
 80001fc:	2301      	movs	r3, #1
 80001fe:	e093      	b.n	8000328 <rtc_getTime+0x140>
	}

	/* Get all RTC register content and store it in static buffer */
	if (STM_I2C_OK != DS3231_I2C_readStream(bufferGet_RTC_DS3231, RTC_REG_SIZE))
 8000200:	2113      	movs	r1, #19
 8000202:	484b      	ldr	r0, [pc, #300]	; (8000330 <rtc_getTime+0x148>)
 8000204:	f000 f896 	bl	8000334 <DS3231_I2C_readStream>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <rtc_getTime+0x2a>
	{
		return RTC_ERROR;
 800020e:	2301      	movs	r3, #1
 8000210:	e08a      	b.n	8000328 <rtc_getTime+0x140>
	}

	/* Save current time and date into dedicated output structure */
	t->seconds = (uint8_t) ((((bufferGet_RTC_DS3231[0] >> 0) & 0x0f) * 1) + (((bufferGet_RTC_DS3231[0] >> 4) & 0x0f) * 10));
 8000212:	4b47      	ldr	r3, [pc, #284]	; (8000330 <rtc_getTime+0x148>)
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	b2db      	uxtb	r3, r3
 8000218:	f003 030f 	and.w	r3, r3, #15
 800021c:	b2da      	uxtb	r2, r3
 800021e:	4b44      	ldr	r3, [pc, #272]	; (8000330 <rtc_getTime+0x148>)
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	b2db      	uxtb	r3, r3
 8000224:	091b      	lsrs	r3, r3, #4
 8000226:	b2db      	uxtb	r3, r3
 8000228:	f003 030f 	and.w	r3, r3, #15
 800022c:	b2db      	uxtb	r3, r3
 800022e:	4619      	mov	r1, r3
 8000230:	0089      	lsls	r1, r1, #2
 8000232:	440b      	add	r3, r1
 8000234:	005b      	lsls	r3, r3, #1
 8000236:	b2db      	uxtb	r3, r3
 8000238:	4413      	add	r3, r2
 800023a:	b2da      	uxtb	r2, r3
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	701a      	strb	r2, [r3, #0]
	t->minutes = (uint8_t) ((((bufferGet_RTC_DS3231[1] >> 0) & 0x0f) * 1) + (((bufferGet_RTC_DS3231[1] >> 4) & 0x0f) * 10));
 8000240:	4b3b      	ldr	r3, [pc, #236]	; (8000330 <rtc_getTime+0x148>)
 8000242:	785b      	ldrb	r3, [r3, #1]
 8000244:	b2db      	uxtb	r3, r3
 8000246:	f003 030f 	and.w	r3, r3, #15
 800024a:	b2da      	uxtb	r2, r3
 800024c:	4b38      	ldr	r3, [pc, #224]	; (8000330 <rtc_getTime+0x148>)
 800024e:	785b      	ldrb	r3, [r3, #1]
 8000250:	b2db      	uxtb	r3, r3
 8000252:	091b      	lsrs	r3, r3, #4
 8000254:	b2db      	uxtb	r3, r3
 8000256:	f003 030f 	and.w	r3, r3, #15
 800025a:	b2db      	uxtb	r3, r3
 800025c:	4619      	mov	r1, r3
 800025e:	0089      	lsls	r1, r1, #2
 8000260:	440b      	add	r3, r1
 8000262:	005b      	lsls	r3, r3, #1
 8000264:	b2db      	uxtb	r3, r3
 8000266:	4413      	add	r3, r2
 8000268:	b2da      	uxtb	r2, r3
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	705a      	strb	r2, [r3, #1]
	t->hours = (uint8_t) ((((bufferGet_RTC_DS3231[2] >> 0) & 0x0f) * 1) + (((bufferGet_RTC_DS3231[2] >> 4) & 0x01) * 10));
 800026e:	4b30      	ldr	r3, [pc, #192]	; (8000330 <rtc_getTime+0x148>)
 8000270:	789b      	ldrb	r3, [r3, #2]
 8000272:	b2db      	uxtb	r3, r3
 8000274:	f003 030f 	and.w	r3, r3, #15
 8000278:	b2da      	uxtb	r2, r3
 800027a:	4b2d      	ldr	r3, [pc, #180]	; (8000330 <rtc_getTime+0x148>)
 800027c:	789b      	ldrb	r3, [r3, #2]
 800027e:	b2db      	uxtb	r3, r3
 8000280:	091b      	lsrs	r3, r3, #4
 8000282:	b2db      	uxtb	r3, r3
 8000284:	f003 0301 	and.w	r3, r3, #1
 8000288:	b2db      	uxtb	r3, r3
 800028a:	4619      	mov	r1, r3
 800028c:	0089      	lsls	r1, r1, #2
 800028e:	440b      	add	r3, r1
 8000290:	005b      	lsls	r3, r3, #1
 8000292:	b2db      	uxtb	r3, r3
 8000294:	4413      	add	r3, r2
 8000296:	b2da      	uxtb	r2, r3
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	709a      	strb	r2, [r3, #2]
	t->date = (uint8_t) ((((bufferGet_RTC_DS3231[4] >> 0) & 0x0f) * 1) + (((bufferGet_RTC_DS3231[4] >> 4) & 0x03) * 10));
 800029c:	4b24      	ldr	r3, [pc, #144]	; (8000330 <rtc_getTime+0x148>)
 800029e:	791b      	ldrb	r3, [r3, #4]
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	f003 030f 	and.w	r3, r3, #15
 80002a6:	b2da      	uxtb	r2, r3
 80002a8:	4b21      	ldr	r3, [pc, #132]	; (8000330 <rtc_getTime+0x148>)
 80002aa:	791b      	ldrb	r3, [r3, #4]
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	091b      	lsrs	r3, r3, #4
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	f003 0303 	and.w	r3, r3, #3
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	4619      	mov	r1, r3
 80002ba:	0089      	lsls	r1, r1, #2
 80002bc:	440b      	add	r3, r1
 80002be:	005b      	lsls	r3, r3, #1
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	4413      	add	r3, r2
 80002c4:	b2da      	uxtb	r2, r3
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	70da      	strb	r2, [r3, #3]
	t->month = (uint8_t) ((((bufferGet_RTC_DS3231[5] >> 0) & 0x0f) * 1) + (((bufferGet_RTC_DS3231[5] >> 4) & 0x01) * 10));
 80002ca:	4b19      	ldr	r3, [pc, #100]	; (8000330 <rtc_getTime+0x148>)
 80002cc:	795b      	ldrb	r3, [r3, #5]
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	f003 030f 	and.w	r3, r3, #15
 80002d4:	b2da      	uxtb	r2, r3
 80002d6:	4b16      	ldr	r3, [pc, #88]	; (8000330 <rtc_getTime+0x148>)
 80002d8:	795b      	ldrb	r3, [r3, #5]
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	091b      	lsrs	r3, r3, #4
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	f003 0301 	and.w	r3, r3, #1
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	4619      	mov	r1, r3
 80002e8:	0089      	lsls	r1, r1, #2
 80002ea:	440b      	add	r3, r1
 80002ec:	005b      	lsls	r3, r3, #1
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	4413      	add	r3, r2
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	711a      	strb	r2, [r3, #4]
	t->year = (uint8_t) ((((bufferGet_RTC_DS3231[6] >> 0) & 0x0f) * 1) + (((bufferGet_RTC_DS3231[6] >> 4) & 0x0f) * 10));
 80002f8:	4b0d      	ldr	r3, [pc, #52]	; (8000330 <rtc_getTime+0x148>)
 80002fa:	799b      	ldrb	r3, [r3, #6]
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	f003 030f 	and.w	r3, r3, #15
 8000302:	b2da      	uxtb	r2, r3
 8000304:	4b0a      	ldr	r3, [pc, #40]	; (8000330 <rtc_getTime+0x148>)
 8000306:	799b      	ldrb	r3, [r3, #6]
 8000308:	b2db      	uxtb	r3, r3
 800030a:	091b      	lsrs	r3, r3, #4
 800030c:	b2db      	uxtb	r3, r3
 800030e:	f003 030f 	and.w	r3, r3, #15
 8000312:	b2db      	uxtb	r3, r3
 8000314:	4619      	mov	r1, r3
 8000316:	0089      	lsls	r1, r1, #2
 8000318:	440b      	add	r3, r1
 800031a:	005b      	lsls	r3, r3, #1
 800031c:	b2db      	uxtb	r3, r3
 800031e:	4413      	add	r3, r2
 8000320:	b2da      	uxtb	r2, r3
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	715a      	strb	r2, [r3, #5]

	return RTC_OK;
 8000326:	2300      	movs	r3, #0
}
 8000328:	4618      	mov	r0, r3
 800032a:	3708      	adds	r7, #8
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	2000005c 	.word	0x2000005c

08000334 <DS3231_I2C_readStream>:
/**
 * @brief Function to read stream bytes of data from RTC DS3231 registers
 * @author LorisRT
 */
static stm_i2c_status_e DS3231_I2C_readStream(volatile uint8_t *buffer_array, uint8_t burst_size)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	460b      	mov	r3, r1
 800033e:	70fb      	strb	r3, [r7, #3]
	uint8_t temp_idx = 0;
 8000340:	2300      	movs	r3, #0
 8000342:	73fb      	strb	r3, [r7, #15]

	/* Send slave ADDR with read condition */
	if(STM_I2C_OK != stm_i2c_send_addr(ADDR_RTC_DS3231, READ))
 8000344:	2101      	movs	r1, #1
 8000346:	2068      	movs	r0, #104	; 0x68
 8000348:	f000 f8bc 	bl	80004c4 <stm_i2c_send_addr>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d019      	beq.n	8000386 <DS3231_I2C_readStream+0x52>
	{
		return STM_I2C_ADDR_FAIL;
 8000352:	2301      	movs	r3, #1
 8000354:	e049      	b.n	80003ea <DS3231_I2C_readStream+0xb6>
	}

	/* Read stream burst on SDA line from sensor */
	while (burst_size-- > 1U)
	{
		while (GET_STM_I2C_RX_STATUS_FLAG() == 0x00);
 8000356:	bf00      	nop
 8000358:	4b26      	ldr	r3, [pc, #152]	; (80003f4 <DS3231_I2C_readStream+0xc0>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	881b      	ldrh	r3, [r3, #0]
 800035e:	b29b      	uxth	r3, r3
 8000360:	099b      	lsrs	r3, r3, #6
 8000362:	b29b      	uxth	r3, r3
 8000364:	b2db      	uxtb	r3, r3
 8000366:	f003 0301 	and.w	r3, r3, #1
 800036a:	2b00      	cmp	r3, #0
 800036c:	d0f4      	beq.n	8000358 <DS3231_I2C_readStream+0x24>
		*(buffer_array + temp_idx++) = *ptr_I2C1_DR;
 800036e:	4b22      	ldr	r3, [pc, #136]	; (80003f8 <DS3231_I2C_readStream+0xc4>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	881b      	ldrh	r3, [r3, #0]
 8000374:	b29a      	uxth	r2, r3
 8000376:	7bfb      	ldrb	r3, [r7, #15]
 8000378:	1c59      	adds	r1, r3, #1
 800037a:	73f9      	strb	r1, [r7, #15]
 800037c:	4619      	mov	r1, r3
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	440b      	add	r3, r1
 8000382:	b2d2      	uxtb	r2, r2
 8000384:	701a      	strb	r2, [r3, #0]
	while (burst_size-- > 1U)
 8000386:	78fb      	ldrb	r3, [r7, #3]
 8000388:	1e5a      	subs	r2, r3, #1
 800038a:	70fa      	strb	r2, [r7, #3]
 800038c:	2b01      	cmp	r3, #1
 800038e:	d8e2      	bhi.n	8000356 <DS3231_I2C_readStream+0x22>
	}

	/* Disable ACK & generate STOP condition before reading last data byte */
	/* (reference: STM procedure from user manual for I2C peripheral) */
	*ptr_I2C1_CR1 &= ~(1 << 10);
 8000390:	4b1a      	ldr	r3, [pc, #104]	; (80003fc <DS3231_I2C_readStream+0xc8>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	881b      	ldrh	r3, [r3, #0]
 8000396:	b29a      	uxth	r2, r3
 8000398:	4b18      	ldr	r3, [pc, #96]	; (80003fc <DS3231_I2C_readStream+0xc8>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80003a0:	b292      	uxth	r2, r2
 80003a2:	801a      	strh	r2, [r3, #0]
	*ptr_I2C1_CR1 |= (1 << 9);
 80003a4:	4b15      	ldr	r3, [pc, #84]	; (80003fc <DS3231_I2C_readStream+0xc8>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	881b      	ldrh	r3, [r3, #0]
 80003aa:	b29a      	uxth	r2, r3
 80003ac:	4b13      	ldr	r3, [pc, #76]	; (80003fc <DS3231_I2C_readStream+0xc8>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80003b4:	b292      	uxth	r2, r2
 80003b6:	801a      	strh	r2, [r3, #0]

	/* Last read from data stream */
	while (GET_STM_I2C_RX_STATUS_FLAG() == 0x00);
 80003b8:	bf00      	nop
 80003ba:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <DS3231_I2C_readStream+0xc0>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	881b      	ldrh	r3, [r3, #0]
 80003c0:	b29b      	uxth	r3, r3
 80003c2:	099b      	lsrs	r3, r3, #6
 80003c4:	b29b      	uxth	r3, r3
 80003c6:	b2db      	uxtb	r3, r3
 80003c8:	f003 0301 	and.w	r3, r3, #1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d0f4      	beq.n	80003ba <DS3231_I2C_readStream+0x86>
	*(buffer_array + temp_idx++) = *ptr_I2C1_DR;
 80003d0:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <DS3231_I2C_readStream+0xc4>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	881b      	ldrh	r3, [r3, #0]
 80003d6:	b29a      	uxth	r2, r3
 80003d8:	7bfb      	ldrb	r3, [r7, #15]
 80003da:	1c59      	adds	r1, r3, #1
 80003dc:	73f9      	strb	r1, [r7, #15]
 80003de:	4619      	mov	r1, r3
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	440b      	add	r3, r1
 80003e4:	b2d2      	uxtb	r2, r2
 80003e6:	701a      	strb	r2, [r3, #0]

	return STM_I2C_OK;
 80003e8:	2300      	movs	r3, #0
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	3710      	adds	r7, #16
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	20000034 	.word	0x20000034
 80003f8:	2000003c 	.word	0x2000003c
 80003fc:	20000024 	.word	0x20000024

08000400 <DS3231_I2C_writePointer>:
/**
 * @brief Function to write one byte of data to RTC DS3231 register
 * @author LorisRT
 */
static stm_i2c_status_e DS3231_I2C_writePointer(uint8_t slave_reg)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	71fb      	strb	r3, [r7, #7]
	/* Send slave ADDR with write condition */
	if (STM_I2C_OK != stm_i2c_send_addr(ADDR_RTC_DS3231, WRITE))
 800040a:	2100      	movs	r1, #0
 800040c:	2068      	movs	r0, #104	; 0x68
 800040e:	f000 f859 	bl	80004c4 <stm_i2c_send_addr>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <DS3231_I2C_writePointer+0x1c>
	{
		return STM_I2C_ADDR_FAIL;
 8000418:	2301      	movs	r3, #1
 800041a:	e013      	b.n	8000444 <DS3231_I2C_writePointer+0x44>
	}

	/* Send sensor register ADDR on SDA line */
	if (STM_I2C_OK != stm_i2c_send_data(slave_reg))
 800041c:	79fb      	ldrb	r3, [r7, #7]
 800041e:	4618      	mov	r0, r3
 8000420:	f000 f816 	bl	8000450 <stm_i2c_send_data>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <DS3231_I2C_writePointer+0x2e>
	{
		return STM_I2C_WRITE_FAIL;
 800042a:	2303      	movs	r3, #3
 800042c:	e00a      	b.n	8000444 <DS3231_I2C_writePointer+0x44>
	}

	/* Send stop condition to SDA line */
	*ptr_I2C1_CR1 |= (1 << 9);
 800042e:	4b07      	ldr	r3, [pc, #28]	; (800044c <DS3231_I2C_writePointer+0x4c>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	881b      	ldrh	r3, [r3, #0]
 8000434:	b29a      	uxth	r2, r3
 8000436:	4b05      	ldr	r3, [pc, #20]	; (800044c <DS3231_I2C_writePointer+0x4c>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800043e:	b292      	uxth	r2, r2
 8000440:	801a      	strh	r2, [r3, #0]

	return STM_I2C_OK;
 8000442:	2300      	movs	r3, #0
}
 8000444:	4618      	mov	r0, r3
 8000446:	3708      	adds	r7, #8
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	20000024 	.word	0x20000024

08000450 <stm_i2c_send_data>:
/**
 * @brief Function to send 1 byte of data on SDA line for I2C1 peripherals
 * @author LorisRT
 */
static stm_i2c_status_e stm_i2c_send_data(uint8_t data)
{
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	4603      	mov	r3, r0
 8000458:	71fb      	strb	r3, [r7, #7]
	*ptr_I2C1_DR = data;
 800045a:	4b18      	ldr	r3, [pc, #96]	; (80004bc <stm_i2c_send_data+0x6c>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	79fa      	ldrb	r2, [r7, #7]
 8000460:	b292      	uxth	r2, r2
 8000462:	801a      	strh	r2, [r3, #0]
	while (0x00 == GET_STM_I2C_TX_STATUS_FLAG() && 0x00 == GET_STM_I2C_ACK_STATUS_FLAG());
 8000464:	bf00      	nop
 8000466:	4b16      	ldr	r3, [pc, #88]	; (80004c0 <stm_i2c_send_data+0x70>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	881b      	ldrh	r3, [r3, #0]
 800046c:	b29b      	uxth	r3, r3
 800046e:	09db      	lsrs	r3, r3, #7
 8000470:	b29b      	uxth	r3, r3
 8000472:	b2db      	uxtb	r3, r3
 8000474:	f003 0301 	and.w	r3, r3, #1
 8000478:	2b00      	cmp	r3, #0
 800047a:	d10a      	bne.n	8000492 <stm_i2c_send_data+0x42>
 800047c:	4b10      	ldr	r3, [pc, #64]	; (80004c0 <stm_i2c_send_data+0x70>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	881b      	ldrh	r3, [r3, #0]
 8000482:	b29b      	uxth	r3, r3
 8000484:	0a9b      	lsrs	r3, r3, #10
 8000486:	b29b      	uxth	r3, r3
 8000488:	b2db      	uxtb	r3, r3
 800048a:	f003 0301 	and.w	r3, r3, #1
 800048e:	2b00      	cmp	r3, #0
 8000490:	d0e9      	beq.n	8000466 <stm_i2c_send_data+0x16>
	if (0x01 == GET_STM_I2C_ACK_STATUS_FLAG())
 8000492:	4b0b      	ldr	r3, [pc, #44]	; (80004c0 <stm_i2c_send_data+0x70>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	881b      	ldrh	r3, [r3, #0]
 8000498:	b29b      	uxth	r3, r3
 800049a:	0a9b      	lsrs	r3, r3, #10
 800049c:	b29b      	uxth	r3, r3
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	f003 0301 	and.w	r3, r3, #1
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d101      	bne.n	80004ac <stm_i2c_send_data+0x5c>
	{
		return STM_I2C_WRITE_FAIL;
 80004a8:	2303      	movs	r3, #3
 80004aa:	e000      	b.n	80004ae <stm_i2c_send_data+0x5e>
	}

	return STM_I2C_OK;
 80004ac:	2300      	movs	r3, #0
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	2000003c 	.word	0x2000003c
 80004c0:	20000034 	.word	0x20000034

080004c4 <stm_i2c_send_addr>:
/**
 * @brief Function to send address on SDA line for I2C1 peripherals
 * @author LorisRT
 */
static stm_i2c_status_e stm_i2c_send_addr(uint8_t addr_sensor, uint8_t rw_bit)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	460a      	mov	r2, r1
 80004ce:	71fb      	strb	r3, [r7, #7]
 80004d0:	4613      	mov	r3, r2
 80004d2:	71bb      	strb	r3, [r7, #6]
	/* Verify read/write bit argument provided to function */
	if (WRITE != rw_bit && READ != rw_bit)
 80004d4:	79bb      	ldrb	r3, [r7, #6]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d004      	beq.n	80004e4 <stm_i2c_send_addr+0x20>
 80004da:	79bb      	ldrb	r3, [r7, #6]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d001      	beq.n	80004e4 <stm_i2c_send_addr+0x20>
	{
		return STM_I2C_ERROR;
 80004e0:	2304      	movs	r3, #4
 80004e2:	e04f      	b.n	8000584 <stm_i2c_send_addr+0xc0>
	}

	/* Enable ACK and generate start condition */
	*ptr_I2C1_CR1 |= (1 << 10);
 80004e4:	4b29      	ldr	r3, [pc, #164]	; (800058c <stm_i2c_send_addr+0xc8>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	881b      	ldrh	r3, [r3, #0]
 80004ea:	b29a      	uxth	r2, r3
 80004ec:	4b27      	ldr	r3, [pc, #156]	; (800058c <stm_i2c_send_addr+0xc8>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80004f4:	b292      	uxth	r2, r2
 80004f6:	801a      	strh	r2, [r3, #0]
	*ptr_I2C1_CR1 |= (1 << 8);
 80004f8:	4b24      	ldr	r3, [pc, #144]	; (800058c <stm_i2c_send_addr+0xc8>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	881b      	ldrh	r3, [r3, #0]
 80004fe:	b29a      	uxth	r2, r3
 8000500:	4b22      	ldr	r3, [pc, #136]	; (800058c <stm_i2c_send_addr+0xc8>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000508:	b292      	uxth	r2, r2
 800050a:	801a      	strh	r2, [r3, #0]
	while (0x00 == GET_STM_I2C_START_STATUS_FLAG());
 800050c:	bf00      	nop
 800050e:	4b20      	ldr	r3, [pc, #128]	; (8000590 <stm_i2c_send_addr+0xcc>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	881b      	ldrh	r3, [r3, #0]
 8000514:	b29b      	uxth	r3, r3
 8000516:	b2db      	uxtb	r3, r3
 8000518:	f003 0301 	and.w	r3, r3, #1
 800051c:	2b00      	cmp	r3, #0
 800051e:	d0f6      	beq.n	800050e <stm_i2c_send_addr+0x4a>

	/* Slave ADDR transmission */
	*ptr_I2C1_DR = (addr_sensor << 1) | (rw_bit << 0);
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	005b      	lsls	r3, r3, #1
 8000524:	b21a      	sxth	r2, r3
 8000526:	79bb      	ldrb	r3, [r7, #6]
 8000528:	b21b      	sxth	r3, r3
 800052a:	4313      	orrs	r3, r2
 800052c:	b21a      	sxth	r2, r3
 800052e:	4b19      	ldr	r3, [pc, #100]	; (8000594 <stm_i2c_send_addr+0xd0>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	b292      	uxth	r2, r2
 8000534:	801a      	strh	r2, [r3, #0]
	while (0x00 == GET_STM_I2C_ADDR_STATUS_FLAG() && 0x00 == GET_STM_I2C_ACK_STATUS_FLAG());
 8000536:	bf00      	nop
 8000538:	4b15      	ldr	r3, [pc, #84]	; (8000590 <stm_i2c_send_addr+0xcc>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	881b      	ldrh	r3, [r3, #0]
 800053e:	b29b      	uxth	r3, r3
 8000540:	085b      	lsrs	r3, r3, #1
 8000542:	b29b      	uxth	r3, r3
 8000544:	b2db      	uxtb	r3, r3
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	2b00      	cmp	r3, #0
 800054c:	d10a      	bne.n	8000564 <stm_i2c_send_addr+0xa0>
 800054e:	4b10      	ldr	r3, [pc, #64]	; (8000590 <stm_i2c_send_addr+0xcc>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	881b      	ldrh	r3, [r3, #0]
 8000554:	b29b      	uxth	r3, r3
 8000556:	0a9b      	lsrs	r3, r3, #10
 8000558:	b29b      	uxth	r3, r3
 800055a:	b2db      	uxtb	r3, r3
 800055c:	f003 0301 	and.w	r3, r3, #1
 8000560:	2b00      	cmp	r3, #0
 8000562:	d0e9      	beq.n	8000538 <stm_i2c_send_addr+0x74>
	if (0x01 == GET_STM_I2C_ACK_STATUS_FLAG()) /* Note: ADDR is not set after NACK reception */
 8000564:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <stm_i2c_send_addr+0xcc>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	b29b      	uxth	r3, r3
 800056c:	0a9b      	lsrs	r3, r3, #10
 800056e:	b29b      	uxth	r3, r3
 8000570:	b2db      	uxtb	r3, r3
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	2b01      	cmp	r3, #1
 8000578:	d101      	bne.n	800057e <stm_i2c_send_addr+0xba>
	{
		return STM_I2C_ADDR_FAIL;
 800057a:	2301      	movs	r3, #1
 800057c:	e002      	b.n	8000584 <stm_i2c_send_addr+0xc0>
	}
	clear_addr_reg();
 800057e:	f000 f90b 	bl	8000798 <clear_addr_reg>

	return STM_I2C_OK;
 8000582:	2300      	movs	r3, #0
}
 8000584:	4618      	mov	r0, r3
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000024 	.word	0x20000024
 8000590:	20000034 	.word	0x20000034
 8000594:	2000003c 	.word	0x2000003c

08000598 <stm_i2c_config>:
/**
 * @brief Configure peripherals parameters for I2C1 communication
 * @author LorisRT
 */
void stm_i2c_config(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
	/* Configure the desired AF (AF4 for I2C1)*/
	*ptr_GPIOB_AFRL = (*ptr_GPIOB_AFRL & ~(0xff << 24)) | (0x44 << 24); /* AF4 for GPIOB 6 (SCL) and 7 (SDA) */
 800059c:	4b4a      	ldr	r3, [pc, #296]	; (80006c8 <stm_i2c_config+0x130>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80005a6:	4b48      	ldr	r3, [pc, #288]	; (80006c8 <stm_i2c_config+0x130>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	f042 4288 	orr.w	r2, r2, #1140850688	; 0x44000000
 80005ae:	601a      	str	r2, [r3, #0]

	/* Configure GPIOB as AF mode for pin 6 and 7 */
	*ptr_GPIOB_MODER = (*ptr_GPIOB_MODER & ~(0xf << 12)) | (0xa << 12);
 80005b0:	4b46      	ldr	r3, [pc, #280]	; (80006cc <stm_i2c_config+0x134>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 80005ba:	4b44      	ldr	r3, [pc, #272]	; (80006cc <stm_i2c_config+0x134>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f442 4220 	orr.w	r2, r2, #40960	; 0xa000
 80005c2:	601a      	str	r2, [r3, #0]

	/* Configure GPIOB speed as High speed */
	*ptr_GPIOB_OSPEEDR = (*ptr_GPIOB_OSPEEDR & ~(0xf << 12)) | (0xa << 12);
 80005c4:	4b42      	ldr	r3, [pc, #264]	; (80006d0 <stm_i2c_config+0x138>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 80005ce:	4b40      	ldr	r3, [pc, #256]	; (80006d0 <stm_i2c_config+0x138>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f442 4220 	orr.w	r2, r2, #40960	; 0xa000
 80005d6:	601a      	str	r2, [r3, #0]

	/* Configure GPIOB as Open-Drain */
	*ptr_GPIOB_OTYPER |= (1 << 6);
 80005d8:	4b3e      	ldr	r3, [pc, #248]	; (80006d4 <stm_i2c_config+0x13c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	4b3d      	ldr	r3, [pc, #244]	; (80006d4 <stm_i2c_config+0x13c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80005e6:	601a      	str	r2, [r3, #0]
	*ptr_GPIOB_OTYPER |= (1 << 7);
 80005e8:	4b3a      	ldr	r3, [pc, #232]	; (80006d4 <stm_i2c_config+0x13c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	4b39      	ldr	r3, [pc, #228]	; (80006d4 <stm_i2c_config+0x13c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80005f6:	601a      	str	r2, [r3, #0]

	/* Configure pull up resistor for i2c consideration (!! Requires additional external resistors !!) */
	*ptr_GPIOB_PUPDR = (*ptr_GPIOB_PUPDR & ~(0xf << 12)) | (0x5 << 12);
 80005f8:	4b37      	ldr	r3, [pc, #220]	; (80006d8 <stm_i2c_config+0x140>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8000602:	4b35      	ldr	r3, [pc, #212]	; (80006d8 <stm_i2c_config+0x140>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f442 42a0 	orr.w	r2, r2, #20480	; 0x5000
 800060a:	601a      	str	r2, [r3, #0]

	/* Reset i2c registers before configuration */
	*ptr_I2C1_CR1 |= (1 << 15);
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <stm_i2c_config+0x144>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	881b      	ldrh	r3, [r3, #0]
 8000612:	b29b      	uxth	r3, r3
 8000614:	4a31      	ldr	r2, [pc, #196]	; (80006dc <stm_i2c_config+0x144>)
 8000616:	6812      	ldr	r2, [r2, #0]
 8000618:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800061c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000620:	b29b      	uxth	r3, r3
 8000622:	8013      	strh	r3, [r2, #0]
	*ptr_I2C1_CR1 &= ~(1 << 15);
 8000624:	4b2d      	ldr	r3, [pc, #180]	; (80006dc <stm_i2c_config+0x144>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	b29a      	uxth	r2, r3
 800062c:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <stm_i2c_config+0x144>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8000634:	b292      	uxth	r2, r2
 8000636:	801a      	strh	r2, [r3, #0]

	/* Configure SCL CLK value for 100kHz communication speed */
	*ptr_I2C1_CR2 = (*ptr_I2C1_CR2 & ~(0x3f << 0)) | (0b001000 << 0); /* 8MHz for APB1 CLK value from HSE */
 8000638:	4b29      	ldr	r3, [pc, #164]	; (80006e0 <stm_i2c_config+0x148>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	881b      	ldrh	r3, [r3, #0]
 800063e:	b29b      	uxth	r3, r3
 8000640:	b21b      	sxth	r3, r3
 8000642:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000646:	b21b      	sxth	r3, r3
 8000648:	f043 0308 	orr.w	r3, r3, #8
 800064c:	b21a      	sxth	r2, r3
 800064e:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <stm_i2c_config+0x148>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	b292      	uxth	r2, r2
 8000654:	801a      	strh	r2, [r3, #0]
	*ptr_I2C1_CCR = *ptr_I2C1_CCR & ~(1 << 15); /* 100kHz Slow Mode (SM) */
 8000656:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <stm_i2c_config+0x14c>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	b29a      	uxth	r2, r3
 800065e:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <stm_i2c_config+0x14c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8000666:	b292      	uxth	r2, r2
 8000668:	801a      	strh	r2, [r3, #0]
	*ptr_I2C1_CCR = (*ptr_I2C1_CCR & ~(0xfff << 0)) | (0x028 << 0); /* (T_high = CCR * T_clk) ==> (CCR = 5000ns/125ns = 40 = 0x28) */
 800066a:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <stm_i2c_config+0x14c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	881b      	ldrh	r3, [r3, #0]
 8000670:	b29b      	uxth	r3, r3
 8000672:	b21b      	sxth	r3, r3
 8000674:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000678:	f023 030f 	bic.w	r3, r3, #15
 800067c:	b21b      	sxth	r3, r3
 800067e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8000682:	b21a      	sxth	r2, r3
 8000684:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <stm_i2c_config+0x14c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	b292      	uxth	r2, r2
 800068a:	801a      	strh	r2, [r3, #0]
	*ptr_I2C1_TRISE = ((*ptr_I2C1_TRISE) & ~(0b111111 << 0)) | (0b001001 << 0); /* (1000ns/125ns + 1) = 9 */
 800068c:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <stm_i2c_config+0x150>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	881b      	ldrh	r3, [r3, #0]
 8000692:	b29b      	uxth	r3, r3
 8000694:	b21b      	sxth	r3, r3
 8000696:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800069a:	b21b      	sxth	r3, r3
 800069c:	f043 0309 	orr.w	r3, r3, #9
 80006a0:	b21a      	sxth	r2, r3
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <stm_i2c_config+0x150>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	b292      	uxth	r2, r2
 80006a8:	801a      	strh	r2, [r3, #0]

	/* Enable I2C peripheral after configuration */
	*ptr_I2C1_CR1 |= (1 << 0);
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <stm_i2c_config+0x144>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <stm_i2c_config+0x144>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f042 0201 	orr.w	r2, r2, #1
 80006ba:	b292      	uxth	r2, r2
 80006bc:	801a      	strh	r2, [r3, #0]
}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	2000001c 	.word	0x2000001c
 80006cc:	20000010 	.word	0x20000010
 80006d0:	20000020 	.word	0x20000020
 80006d4:	20000014 	.word	0x20000014
 80006d8:	20000018 	.word	0x20000018
 80006dc:	20000024 	.word	0x20000024
 80006e0:	20000028 	.word	0x20000028
 80006e4:	2000002c 	.word	0x2000002c
 80006e8:	20000030 	.word	0x20000030

080006ec <stm_enable_clock>:
/**
 * @brief Enable STM CLK for I2C and GPIO peripherals
 * @author LorisRT
 */
void stm_enable_clock(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	stm_clock_config();
 80006f0:	f000 f804 	bl	80006fc <stm_clock_config>
	stm_peripheral_clock_unable();
 80006f4:	f000 f834 	bl	8000760 <stm_peripheral_clock_unable>
}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}

080006fc <stm_clock_config>:
/**
 * @brief Configure STM32 CLK with HSE 8MHz
 * @author LorisRT
 */
static void stm_clock_config(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
	/* Turn ON HSE CLK and wait for output to be stable */
	*ptr_RCC_CR |= (1 << 16);
 8000700:	4b15      	ldr	r3, [pc, #84]	; (8000758 <stm_clock_config+0x5c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <stm_clock_config+0x5c>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800070e:	601a      	str	r2, [r3, #0]
	while (0x00 == GET_STM_HSE_STATUS_FLAG());
 8000710:	bf00      	nop
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <stm_clock_config+0x5c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	0c5b      	lsrs	r3, r3, #17
 800071a:	b2db      	uxtb	r3, r3
 800071c:	f003 0301 	and.w	r3, r3, #1
 8000720:	2b00      	cmp	r3, #0
 8000722:	d0f6      	beq.n	8000712 <stm_clock_config+0x16>

	/* Set HSE CLK as system CLK and wait for hardware indication that HSE has been set*/
	*ptr_RCC_CFGR = (*ptr_RCC_CFGR & ~(0x03 << 0)) | (0x01);
 8000724:	4b0d      	ldr	r3, [pc, #52]	; (800075c <stm_clock_config+0x60>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f023 0203 	bic.w	r2, r3, #3
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <stm_clock_config+0x60>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f042 0201 	orr.w	r2, r2, #1
 8000736:	601a      	str	r2, [r3, #0]
	while (0x01 != GET_STM_CLK_SWITCH_STATUS_FLAG());
 8000738:	bf00      	nop
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <stm_clock_config+0x60>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	089b      	lsrs	r3, r3, #2
 8000742:	b2db      	uxtb	r3, r3
 8000744:	f003 0303 	and.w	r3, r3, #3
 8000748:	2b01      	cmp	r3, #1
 800074a:	d1f6      	bne.n	800073a <stm_clock_config+0x3e>
}
 800074c:	bf00      	nop
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	20000008 	.word	0x20000008
 800075c:	2000000c 	.word	0x2000000c

08000760 <stm_peripheral_clock_unable>:
/**
 * @brief Enable APB1 CLK for UART and I2C peripherals
 * @author LorisRT
 */
static void stm_peripheral_clock_unable(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
	*ptr_RCC_AHB1ENR |= (1 << 1); /* GPIOB EN */
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <stm_peripheral_clock_unable+0x30>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <stm_peripheral_clock_unable+0x30>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f042 0202 	orr.w	r2, r2, #2
 8000772:	601a      	str	r2, [r3, #0]
	*ptr_RCC_APB1ENR |= (1 << 21); /* I2C1 EN */
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <stm_peripheral_clock_unable+0x34>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <stm_peripheral_clock_unable+0x34>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000782:	601a      	str	r2, [r3, #0]
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	20000004 	.word	0x20000004
 8000794:	20000000 	.word	0x20000000

08000798 <clear_addr_reg>:
/**
 * @brief Procedure to clear ADDR bit once it is set
 * @author LorisRT
 */
static inline void clear_addr_reg(void)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
	uint16_t dummyReadVar;
	dummyReadVar = *ptr_I2C1_SR1;
 800079e:	4b07      	ldr	r3, [pc, #28]	; (80007bc <clear_addr_reg+0x24>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	881b      	ldrh	r3, [r3, #0]
 80007a4:	80fb      	strh	r3, [r7, #6]
	dummyReadVar = *ptr_I2C1_SR2;
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <clear_addr_reg+0x28>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	80fb      	strh	r3, [r7, #6]
	(void) dummyReadVar;
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	20000034 	.word	0x20000034
 80007c0:	20000038 	.word	0x20000038

080007c4 <main>:
uint8_t var_date;
uint8_t var_month;
uint8_t var_year;

int main(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
	/**
	 * Structure definition for setting RTC time
	 * if SET_TIME_REQUIRE = 1
	 */
	time_t var_currentTime = {
 80007ca:	4a13      	ldr	r2, [pc, #76]	; (8000818 <main+0x54>)
 80007cc:	f107 0308 	add.w	r3, r7, #8
 80007d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007d4:	6018      	str	r0, [r3, #0]
 80007d6:	3304      	adds	r3, #4
 80007d8:	8019      	strh	r1, [r3, #0]

	/* Structure definition to save RTC time */
	time_t var_getTime;

	/* Clock initialisation for I2C1 and GPIOB */
	stm_enable_clock();
 80007da:	f7ff ff87 	bl	80006ec <stm_enable_clock>

	/* I2C1 peripheral configuration and initialisation */
	stm_i2c_config();
 80007de:	f7ff fedb 	bl	8000598 <stm_i2c_config>
	 * While no error in I2C communication between
	 * STM32F407 Board and RTC DS3231 Module,
	 * read current time from RTC module and save
	 * data in global variable for STM Studio display
	 */
	while (RTC_OK == rtc_getTime(&var_getTime))
 80007e2:	e011      	b.n	8000808 <main+0x44>
	{
		var_seconds = var_getTime.seconds;
 80007e4:	783a      	ldrb	r2, [r7, #0]
 80007e6:	4b0d      	ldr	r3, [pc, #52]	; (800081c <main+0x58>)
 80007e8:	701a      	strb	r2, [r3, #0]
		var_minutes = var_getTime.minutes;
 80007ea:	787a      	ldrb	r2, [r7, #1]
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <main+0x5c>)
 80007ee:	701a      	strb	r2, [r3, #0]
		var_hours = var_getTime.hours;
 80007f0:	78ba      	ldrb	r2, [r7, #2]
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <main+0x60>)
 80007f4:	701a      	strb	r2, [r3, #0]
		var_date = var_getTime.date;
 80007f6:	78fa      	ldrb	r2, [r7, #3]
 80007f8:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <main+0x64>)
 80007fa:	701a      	strb	r2, [r3, #0]
		var_month = var_getTime.month;
 80007fc:	793a      	ldrb	r2, [r7, #4]
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <main+0x68>)
 8000800:	701a      	strb	r2, [r3, #0]
		var_year = var_getTime.year;
 8000802:	797a      	ldrb	r2, [r7, #5]
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <main+0x6c>)
 8000806:	701a      	strb	r2, [r3, #0]
	while (RTC_OK == rtc_getTime(&var_getTime))
 8000808:	463b      	mov	r3, r7
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff fcec 	bl	80001e8 <rtc_getTime>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d0e6      	beq.n	80007e4 <main+0x20>
    /**
     * Loop forever:
     * Should never get here,
     * otherwise error during I2C communication
     */
	for(;;);
 8000816:	e7fe      	b.n	8000816 <main+0x52>
 8000818:	080008e8 	.word	0x080008e8
 800081c:	2000006f 	.word	0x2000006f
 8000820:	20000070 	.word	0x20000070
 8000824:	20000071 	.word	0x20000071
 8000828:	20000072 	.word	0x20000072
 800082c:	20000073 	.word	0x20000073
 8000830:	20000074 	.word	0x20000074

08000834 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000834:	480d      	ldr	r0, [pc, #52]	; (800086c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000836:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000838:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800083c:	480c      	ldr	r0, [pc, #48]	; (8000870 <LoopForever+0x6>)
  ldr r1, =_edata
 800083e:	490d      	ldr	r1, [pc, #52]	; (8000874 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000840:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <LoopForever+0xe>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000844:	e002      	b.n	800084c <LoopCopyDataInit>

08000846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800084a:	3304      	adds	r3, #4

0800084c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800084c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000850:	d3f9      	bcc.n	8000846 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000854:	4c0a      	ldr	r4, [pc, #40]	; (8000880 <LoopForever+0x16>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000858:	e001      	b.n	800085e <LoopFillZerobss>

0800085a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800085a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800085c:	3204      	adds	r2, #4

0800085e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000860:	d3fb      	bcc.n	800085a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000862:	f000 f811 	bl	8000888 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000866:	f7ff ffad 	bl	80007c4 <main>

0800086a <LoopForever>:

LoopForever:
    b LoopForever
 800086a:	e7fe      	b.n	800086a <LoopForever>
  ldr   r0, =_estack
 800086c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000874:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8000878:	080008f8 	.word	0x080008f8
  ldr r2, =_sbss
 800087c:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8000880:	20000078 	.word	0x20000078

08000884 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000884:	e7fe      	b.n	8000884 <ADC_IRQHandler>
	...

08000888 <__libc_init_array>:
 8000888:	b570      	push	{r4, r5, r6, lr}
 800088a:	4d0d      	ldr	r5, [pc, #52]	; (80008c0 <__libc_init_array+0x38>)
 800088c:	4c0d      	ldr	r4, [pc, #52]	; (80008c4 <__libc_init_array+0x3c>)
 800088e:	1b64      	subs	r4, r4, r5
 8000890:	10a4      	asrs	r4, r4, #2
 8000892:	2600      	movs	r6, #0
 8000894:	42a6      	cmp	r6, r4
 8000896:	d109      	bne.n	80008ac <__libc_init_array+0x24>
 8000898:	4d0b      	ldr	r5, [pc, #44]	; (80008c8 <__libc_init_array+0x40>)
 800089a:	4c0c      	ldr	r4, [pc, #48]	; (80008cc <__libc_init_array+0x44>)
 800089c:	f000 f818 	bl	80008d0 <_init>
 80008a0:	1b64      	subs	r4, r4, r5
 80008a2:	10a4      	asrs	r4, r4, #2
 80008a4:	2600      	movs	r6, #0
 80008a6:	42a6      	cmp	r6, r4
 80008a8:	d105      	bne.n	80008b6 <__libc_init_array+0x2e>
 80008aa:	bd70      	pop	{r4, r5, r6, pc}
 80008ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80008b0:	4798      	blx	r3
 80008b2:	3601      	adds	r6, #1
 80008b4:	e7ee      	b.n	8000894 <__libc_init_array+0xc>
 80008b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80008ba:	4798      	blx	r3
 80008bc:	3601      	adds	r6, #1
 80008be:	e7f2      	b.n	80008a6 <__libc_init_array+0x1e>
 80008c0:	080008f0 	.word	0x080008f0
 80008c4:	080008f0 	.word	0x080008f0
 80008c8:	080008f0 	.word	0x080008f0
 80008cc:	080008f4 	.word	0x080008f4

080008d0 <_init>:
 80008d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008d2:	bf00      	nop
 80008d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008d6:	bc08      	pop	{r3}
 80008d8:	469e      	mov	lr, r3
 80008da:	4770      	bx	lr

080008dc <_fini>:
 80008dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008de:	bf00      	nop
 80008e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008e2:	bc08      	pop	{r3}
 80008e4:	469e      	mov	lr, r3
 80008e6:	4770      	bx	lr
