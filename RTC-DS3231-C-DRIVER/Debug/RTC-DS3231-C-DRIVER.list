
RTC-DS3231-C-DRIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006f4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800089c  0800089c  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800089c  0800089c  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  0800089c  0800089c  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800089c  0800089c  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800089c  0800089c  0001089c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080008a0  080008a0  000108a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  080008a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020040  2**0
                  CONTENTS
 10 .bss          0000002c  20000040  20000040  00020040  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000006c  2000006c  00020040  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000566  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000023c  00000000  00000000  000205d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a8  00000000  00000000  00020818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000080  00000000  00000000  000208c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001079  00000000  00000000  00020940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000abe  00000000  00000000  000219b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004259  00000000  00000000  00022477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000266d0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001a4  00000000  00000000  00026720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000040 	.word	0x20000040
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000884 	.word	0x08000884

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000044 	.word	0x20000044
 80001e4:	08000884 	.word	0x08000884

080001e8 <DS3231_I2C_readStream>:
/**
 * @brief Function to read stream bytes of data from RTC DS3231 registers
 * @author LorisRT
 */
stm_i2c_status_e DS3231_I2C_readStream(uint8_t *buffer_array, uint8_t burst_size)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b084      	sub	sp, #16
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	460b      	mov	r3, r1
 80001f2:	70fb      	strb	r3, [r7, #3]
	uint8_t temp_idx = 0;
 80001f4:	2300      	movs	r3, #0
 80001f6:	73fb      	strb	r3, [r7, #15]

	/* Send slave ADDR with read condition */
	if(STM_I2C_OK != stm_i2c_send_addr(ADDR_RTC_DS3231, 1))
 80001f8:	2101      	movs	r1, #1
 80001fa:	2068      	movs	r0, #104	; 0x68
 80001fc:	f000 f8c6 	bl	800038c <stm_i2c_send_addr>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d019      	beq.n	800023a <DS3231_I2C_readStream+0x52>
	{
		return STM_I2C_ADDR_FAIL;
 8000206:	2301      	movs	r3, #1
 8000208:	e049      	b.n	800029e <DS3231_I2C_readStream+0xb6>
	}

	/* Read stream burst on SDA line from sensor */
	while (burst_size-- > 1U)
	{
		while (GET_STM_I2C_RX_STATUS_FLAG() == 0x00);
 800020a:	bf00      	nop
 800020c:	4b26      	ldr	r3, [pc, #152]	; (80002a8 <DS3231_I2C_readStream+0xc0>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	881b      	ldrh	r3, [r3, #0]
 8000212:	b29b      	uxth	r3, r3
 8000214:	099b      	lsrs	r3, r3, #6
 8000216:	b29b      	uxth	r3, r3
 8000218:	b2db      	uxtb	r3, r3
 800021a:	f003 0301 	and.w	r3, r3, #1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d0f4      	beq.n	800020c <DS3231_I2C_readStream+0x24>
		*(buffer_array + temp_idx++) = *ptr_I2C1_DR;
 8000222:	4b22      	ldr	r3, [pc, #136]	; (80002ac <DS3231_I2C_readStream+0xc4>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	881b      	ldrh	r3, [r3, #0]
 8000228:	b29a      	uxth	r2, r3
 800022a:	7bfb      	ldrb	r3, [r7, #15]
 800022c:	1c59      	adds	r1, r3, #1
 800022e:	73f9      	strb	r1, [r7, #15]
 8000230:	4619      	mov	r1, r3
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	440b      	add	r3, r1
 8000236:	b2d2      	uxtb	r2, r2
 8000238:	701a      	strb	r2, [r3, #0]
	while (burst_size-- > 1U)
 800023a:	78fb      	ldrb	r3, [r7, #3]
 800023c:	1e5a      	subs	r2, r3, #1
 800023e:	70fa      	strb	r2, [r7, #3]
 8000240:	2b01      	cmp	r3, #1
 8000242:	d8e2      	bhi.n	800020a <DS3231_I2C_readStream+0x22>
	}

	/* Disable ACK & generate STOP condition before reading last data byte */
	/* (reference: STM procedure from user manual for I2C peripheral) */
	*ptr_I2C1_CR1 &= ~(1 << 10);
 8000244:	4b1a      	ldr	r3, [pc, #104]	; (80002b0 <DS3231_I2C_readStream+0xc8>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	881b      	ldrh	r3, [r3, #0]
 800024a:	b29a      	uxth	r2, r3
 800024c:	4b18      	ldr	r3, [pc, #96]	; (80002b0 <DS3231_I2C_readStream+0xc8>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000254:	b292      	uxth	r2, r2
 8000256:	801a      	strh	r2, [r3, #0]
	*ptr_I2C1_CR1 |= (1 << 9);
 8000258:	4b15      	ldr	r3, [pc, #84]	; (80002b0 <DS3231_I2C_readStream+0xc8>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	881b      	ldrh	r3, [r3, #0]
 800025e:	b29a      	uxth	r2, r3
 8000260:	4b13      	ldr	r3, [pc, #76]	; (80002b0 <DS3231_I2C_readStream+0xc8>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000268:	b292      	uxth	r2, r2
 800026a:	801a      	strh	r2, [r3, #0]

	/* Last read from data stream */
	while (GET_STM_I2C_RX_STATUS_FLAG() == 0x00);
 800026c:	bf00      	nop
 800026e:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <DS3231_I2C_readStream+0xc0>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	881b      	ldrh	r3, [r3, #0]
 8000274:	b29b      	uxth	r3, r3
 8000276:	099b      	lsrs	r3, r3, #6
 8000278:	b29b      	uxth	r3, r3
 800027a:	b2db      	uxtb	r3, r3
 800027c:	f003 0301 	and.w	r3, r3, #1
 8000280:	2b00      	cmp	r3, #0
 8000282:	d0f4      	beq.n	800026e <DS3231_I2C_readStream+0x86>
	*(buffer_array + temp_idx++) = *ptr_I2C1_DR;
 8000284:	4b09      	ldr	r3, [pc, #36]	; (80002ac <DS3231_I2C_readStream+0xc4>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	881b      	ldrh	r3, [r3, #0]
 800028a:	b29a      	uxth	r2, r3
 800028c:	7bfb      	ldrb	r3, [r7, #15]
 800028e:	1c59      	adds	r1, r3, #1
 8000290:	73f9      	strb	r1, [r7, #15]
 8000292:	4619      	mov	r1, r3
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	440b      	add	r3, r1
 8000298:	b2d2      	uxtb	r2, r2
 800029a:	701a      	strb	r2, [r3, #0]

	return STM_I2C_OK;
 800029c:	2300      	movs	r3, #0
}
 800029e:	4618      	mov	r0, r3
 80002a0:	3710      	adds	r7, #16
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	20000034 	.word	0x20000034
 80002ac:	2000003c 	.word	0x2000003c
 80002b0:	20000024 	.word	0x20000024

080002b4 <DS3231_I2C_writePointer>:
/**
 * @brief Function to write one byte of data to RTC DS3231 register
 * @author LorisRT
 */
stm_i2c_status_e DS3231_I2C_writePointer(uint8_t slave_reg)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
	/* Send slave ADDR with write condition */
	if (STM_I2C_OK != stm_i2c_send_addr(ADDR_RTC_DS3231, 0))
 80002be:	2100      	movs	r1, #0
 80002c0:	2068      	movs	r0, #104	; 0x68
 80002c2:	f000 f863 	bl	800038c <stm_i2c_send_addr>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <DS3231_I2C_writePointer+0x1c>
	{
		return STM_I2C_ADDR_FAIL;
 80002cc:	2301      	movs	r3, #1
 80002ce:	e013      	b.n	80002f8 <DS3231_I2C_writePointer+0x44>
	}

	/* Send sensor register ADDR on SDA line */
	if (STM_I2C_OK != stm_i2c_send_data(slave_reg))
 80002d0:	79fb      	ldrb	r3, [r7, #7]
 80002d2:	4618      	mov	r0, r3
 80002d4:	f000 f816 	bl	8000304 <stm_i2c_send_data>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <DS3231_I2C_writePointer+0x2e>
	{
		return STM_I2C_WRITE_FAIL;
 80002de:	2303      	movs	r3, #3
 80002e0:	e00a      	b.n	80002f8 <DS3231_I2C_writePointer+0x44>
	}

	/* Send stop condition to SDA line */
	*ptr_I2C1_CR1 |= (1 << 9);
 80002e2:	4b07      	ldr	r3, [pc, #28]	; (8000300 <DS3231_I2C_writePointer+0x4c>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	881b      	ldrh	r3, [r3, #0]
 80002e8:	b29a      	uxth	r2, r3
 80002ea:	4b05      	ldr	r3, [pc, #20]	; (8000300 <DS3231_I2C_writePointer+0x4c>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80002f2:	b292      	uxth	r2, r2
 80002f4:	801a      	strh	r2, [r3, #0]

	return STM_I2C_OK;
 80002f6:	2300      	movs	r3, #0
}
 80002f8:	4618      	mov	r0, r3
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	20000024 	.word	0x20000024

08000304 <stm_i2c_send_data>:
/**
 * @brief Function to send 1 byte of data on SDA line for I2C1 peripherals
 * @author LorisRT
 */
static stm_i2c_status_e stm_i2c_send_data(uint8_t data)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	71fb      	strb	r3, [r7, #7]
	*ptr_I2C1_DR = data;
 800030e:	4b1d      	ldr	r3, [pc, #116]	; (8000384 <stm_i2c_send_data+0x80>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	79fa      	ldrb	r2, [r7, #7]
 8000314:	b292      	uxth	r2, r2
 8000316:	801a      	strh	r2, [r3, #0]
	while ((GET_STM_I2C_TX_STATUS_FLAG() == 0x00) & (GET_STM_I2C_ACK_STATUS_FLAG() == 0x00));
 8000318:	bf00      	nop
 800031a:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <stm_i2c_send_data+0x84>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	881b      	ldrh	r3, [r3, #0]
 8000320:	b29b      	uxth	r3, r3
 8000322:	09db      	lsrs	r3, r3, #7
 8000324:	b29b      	uxth	r3, r3
 8000326:	b2db      	uxtb	r3, r3
 8000328:	f003 0301 	and.w	r3, r3, #1
 800032c:	2b00      	cmp	r3, #0
 800032e:	bf0c      	ite	eq
 8000330:	2301      	moveq	r3, #1
 8000332:	2300      	movne	r3, #0
 8000334:	b2da      	uxtb	r2, r3
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <stm_i2c_send_data+0x84>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	881b      	ldrh	r3, [r3, #0]
 800033c:	b29b      	uxth	r3, r3
 800033e:	0a9b      	lsrs	r3, r3, #10
 8000340:	b29b      	uxth	r3, r3
 8000342:	b2db      	uxtb	r3, r3
 8000344:	f003 0301 	and.w	r3, r3, #1
 8000348:	2b00      	cmp	r3, #0
 800034a:	bf0c      	ite	eq
 800034c:	2301      	moveq	r3, #1
 800034e:	2300      	movne	r3, #0
 8000350:	b2db      	uxtb	r3, r3
 8000352:	4013      	ands	r3, r2
 8000354:	b2db      	uxtb	r3, r3
 8000356:	2b00      	cmp	r3, #0
 8000358:	d1df      	bne.n	800031a <stm_i2c_send_data+0x16>
	if (GET_STM_I2C_ACK_STATUS_FLAG() == 0x01)
 800035a:	4b0b      	ldr	r3, [pc, #44]	; (8000388 <stm_i2c_send_data+0x84>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	881b      	ldrh	r3, [r3, #0]
 8000360:	b29b      	uxth	r3, r3
 8000362:	0a9b      	lsrs	r3, r3, #10
 8000364:	b29b      	uxth	r3, r3
 8000366:	b2db      	uxtb	r3, r3
 8000368:	f003 0301 	and.w	r3, r3, #1
 800036c:	2b01      	cmp	r3, #1
 800036e:	d101      	bne.n	8000374 <stm_i2c_send_data+0x70>
	{
		return STM_I2C_WRITE_FAIL;
 8000370:	2303      	movs	r3, #3
 8000372:	e000      	b.n	8000376 <stm_i2c_send_data+0x72>
	}

	return STM_I2C_OK;
 8000374:	2300      	movs	r3, #0
}
 8000376:	4618      	mov	r0, r3
 8000378:	370c      	adds	r7, #12
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	2000003c 	.word	0x2000003c
 8000388:	20000034 	.word	0x20000034

0800038c <stm_i2c_send_addr>:
/**
 * @brief Function to send address on SDA line for I2C1 peripherals
 * @author LorisRT
 */
static stm_i2c_status_e stm_i2c_send_addr(uint8_t addr_sensor, uint8_t rw_bit)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	4603      	mov	r3, r0
 8000394:	460a      	mov	r2, r1
 8000396:	71fb      	strb	r3, [r7, #7]
 8000398:	4613      	mov	r3, r2
 800039a:	71bb      	strb	r3, [r7, #6]
	/* Enable ACK and generate start condition*/
	*ptr_I2C1_CR1 |= (1 << 10);
 800039c:	4b29      	ldr	r3, [pc, #164]	; (8000444 <stm_i2c_send_addr+0xb8>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	881b      	ldrh	r3, [r3, #0]
 80003a2:	b29a      	uxth	r2, r3
 80003a4:	4b27      	ldr	r3, [pc, #156]	; (8000444 <stm_i2c_send_addr+0xb8>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80003ac:	b292      	uxth	r2, r2
 80003ae:	801a      	strh	r2, [r3, #0]
	*ptr_I2C1_CR1 |= (1 << 8);
 80003b0:	4b24      	ldr	r3, [pc, #144]	; (8000444 <stm_i2c_send_addr+0xb8>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	881b      	ldrh	r3, [r3, #0]
 80003b6:	b29a      	uxth	r2, r3
 80003b8:	4b22      	ldr	r3, [pc, #136]	; (8000444 <stm_i2c_send_addr+0xb8>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80003c0:	b292      	uxth	r2, r2
 80003c2:	801a      	strh	r2, [r3, #0]
	while (GET_STM_I2C_START_STATUS_FLAG() == 0x00);
 80003c4:	bf00      	nop
 80003c6:	4b20      	ldr	r3, [pc, #128]	; (8000448 <stm_i2c_send_addr+0xbc>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	881b      	ldrh	r3, [r3, #0]
 80003cc:	b29b      	uxth	r3, r3
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	f003 0301 	and.w	r3, r3, #1
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d0f6      	beq.n	80003c6 <stm_i2c_send_addr+0x3a>

	/* Slave ADDR transmission */
	*ptr_I2C1_DR = (addr_sensor << 1) | (rw_bit << 0);
 80003d8:	79fb      	ldrb	r3, [r7, #7]
 80003da:	005b      	lsls	r3, r3, #1
 80003dc:	b21a      	sxth	r2, r3
 80003de:	79bb      	ldrb	r3, [r7, #6]
 80003e0:	b21b      	sxth	r3, r3
 80003e2:	4313      	orrs	r3, r2
 80003e4:	b21a      	sxth	r2, r3
 80003e6:	4b19      	ldr	r3, [pc, #100]	; (800044c <stm_i2c_send_addr+0xc0>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	b292      	uxth	r2, r2
 80003ec:	801a      	strh	r2, [r3, #0]
	while ((GET_STM_I2C_ADDR_STATUS_FLAG() == 0x00) && (GET_STM_I2C_ACK_STATUS_FLAG() == 0x00));
 80003ee:	bf00      	nop
 80003f0:	4b15      	ldr	r3, [pc, #84]	; (8000448 <stm_i2c_send_addr+0xbc>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	881b      	ldrh	r3, [r3, #0]
 80003f6:	b29b      	uxth	r3, r3
 80003f8:	085b      	lsrs	r3, r3, #1
 80003fa:	b29b      	uxth	r3, r3
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	f003 0301 	and.w	r3, r3, #1
 8000402:	2b00      	cmp	r3, #0
 8000404:	d10a      	bne.n	800041c <stm_i2c_send_addr+0x90>
 8000406:	4b10      	ldr	r3, [pc, #64]	; (8000448 <stm_i2c_send_addr+0xbc>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	881b      	ldrh	r3, [r3, #0]
 800040c:	b29b      	uxth	r3, r3
 800040e:	0a9b      	lsrs	r3, r3, #10
 8000410:	b29b      	uxth	r3, r3
 8000412:	b2db      	uxtb	r3, r3
 8000414:	f003 0301 	and.w	r3, r3, #1
 8000418:	2b00      	cmp	r3, #0
 800041a:	d0e9      	beq.n	80003f0 <stm_i2c_send_addr+0x64>
	if (GET_STM_I2C_ACK_STATUS_FLAG() == 0x01) /* Note: ADDR is not set after NACK reception */
 800041c:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <stm_i2c_send_addr+0xbc>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	881b      	ldrh	r3, [r3, #0]
 8000422:	b29b      	uxth	r3, r3
 8000424:	0a9b      	lsrs	r3, r3, #10
 8000426:	b29b      	uxth	r3, r3
 8000428:	b2db      	uxtb	r3, r3
 800042a:	f003 0301 	and.w	r3, r3, #1
 800042e:	2b01      	cmp	r3, #1
 8000430:	d101      	bne.n	8000436 <stm_i2c_send_addr+0xaa>
	{
		return STM_I2C_ADDR_FAIL;
 8000432:	2301      	movs	r3, #1
 8000434:	e002      	b.n	800043c <stm_i2c_send_addr+0xb0>
	}
	clear_addr_reg();
 8000436:	f000 f90b 	bl	8000650 <clear_addr_reg>

	return STM_I2C_OK;
 800043a:	2300      	movs	r3, #0
}
 800043c:	4618      	mov	r0, r3
 800043e:	3708      	adds	r7, #8
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	20000024 	.word	0x20000024
 8000448:	20000034 	.word	0x20000034
 800044c:	2000003c 	.word	0x2000003c

08000450 <stm_i2c_config>:
/**
 * @brief Configure peripherals parameters for I2C1 communication
 * @author LorisRT
 */
void stm_i2c_config(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
	/* Configure the desired AF (AF4 for I2C1)*/
	*ptr_GPIOB_AFRL = (*ptr_GPIOB_AFRL & ~(0xff << 24)) | (0x44 << 24); /* AF4 for GPIOB 6 (SCL) and 7 (SDA) */
 8000454:	4b4a      	ldr	r3, [pc, #296]	; (8000580 <stm_i2c_config+0x130>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800045e:	4b48      	ldr	r3, [pc, #288]	; (8000580 <stm_i2c_config+0x130>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	f042 4288 	orr.w	r2, r2, #1140850688	; 0x44000000
 8000466:	601a      	str	r2, [r3, #0]

	/* Configure GPIOB as AF mode for pin 6 and 7 */
	*ptr_GPIOB_MODER = (*ptr_GPIOB_MODER & ~(0xf << 12)) | (0xa << 12);
 8000468:	4b46      	ldr	r3, [pc, #280]	; (8000584 <stm_i2c_config+0x134>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8000472:	4b44      	ldr	r3, [pc, #272]	; (8000584 <stm_i2c_config+0x134>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f442 4220 	orr.w	r2, r2, #40960	; 0xa000
 800047a:	601a      	str	r2, [r3, #0]

	/* Configure GPIOB speed as High speed */
	*ptr_GPIOB_OSPEEDR = (*ptr_GPIOB_OSPEEDR & ~(0xf << 12)) | (0xa << 12);
 800047c:	4b42      	ldr	r3, [pc, #264]	; (8000588 <stm_i2c_config+0x138>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8000486:	4b40      	ldr	r3, [pc, #256]	; (8000588 <stm_i2c_config+0x138>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	f442 4220 	orr.w	r2, r2, #40960	; 0xa000
 800048e:	601a      	str	r2, [r3, #0]

	/* Configure GPIOB as Open-Drain */
	*ptr_GPIOB_OTYPER |= (1 << 6);
 8000490:	4b3e      	ldr	r3, [pc, #248]	; (800058c <stm_i2c_config+0x13c>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	681a      	ldr	r2, [r3, #0]
 8000496:	4b3d      	ldr	r3, [pc, #244]	; (800058c <stm_i2c_config+0x13c>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800049e:	601a      	str	r2, [r3, #0]
	*ptr_GPIOB_OTYPER |= (1 << 7);
 80004a0:	4b3a      	ldr	r3, [pc, #232]	; (800058c <stm_i2c_config+0x13c>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	681a      	ldr	r2, [r3, #0]
 80004a6:	4b39      	ldr	r3, [pc, #228]	; (800058c <stm_i2c_config+0x13c>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80004ae:	601a      	str	r2, [r3, #0]

	/* Configure pull up resistor for i2c consideration (!! Requires additional external resistors !!) */
	*ptr_GPIOB_PUPDR = (*ptr_GPIOB_PUPDR & ~(0xf << 12)) | (0x5 << 12);
 80004b0:	4b37      	ldr	r3, [pc, #220]	; (8000590 <stm_i2c_config+0x140>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 80004ba:	4b35      	ldr	r3, [pc, #212]	; (8000590 <stm_i2c_config+0x140>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f442 42a0 	orr.w	r2, r2, #20480	; 0x5000
 80004c2:	601a      	str	r2, [r3, #0]

	/* Reset i2c registers before configuration */
	*ptr_I2C1_CR1 |= (1 << 15);
 80004c4:	4b33      	ldr	r3, [pc, #204]	; (8000594 <stm_i2c_config+0x144>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	881b      	ldrh	r3, [r3, #0]
 80004ca:	b29b      	uxth	r3, r3
 80004cc:	4a31      	ldr	r2, [pc, #196]	; (8000594 <stm_i2c_config+0x144>)
 80004ce:	6812      	ldr	r2, [r2, #0]
 80004d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80004d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80004d8:	b29b      	uxth	r3, r3
 80004da:	8013      	strh	r3, [r2, #0]
	*ptr_I2C1_CR1 &= ~(1 << 15);
 80004dc:	4b2d      	ldr	r3, [pc, #180]	; (8000594 <stm_i2c_config+0x144>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	881b      	ldrh	r3, [r3, #0]
 80004e2:	b29a      	uxth	r2, r3
 80004e4:	4b2b      	ldr	r3, [pc, #172]	; (8000594 <stm_i2c_config+0x144>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80004ec:	b292      	uxth	r2, r2
 80004ee:	801a      	strh	r2, [r3, #0]

	/* Configure SCL CLK value for 100kHz communication speed */
	*ptr_I2C1_CR2 = (*ptr_I2C1_CR2 & ~(0x3f << 0)) | (0b001000 << 0); /* 8MHz for APB1 CLK value from HSE */
 80004f0:	4b29      	ldr	r3, [pc, #164]	; (8000598 <stm_i2c_config+0x148>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	881b      	ldrh	r3, [r3, #0]
 80004f6:	b29b      	uxth	r3, r3
 80004f8:	b21b      	sxth	r3, r3
 80004fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80004fe:	b21b      	sxth	r3, r3
 8000500:	f043 0308 	orr.w	r3, r3, #8
 8000504:	b21a      	sxth	r2, r3
 8000506:	4b24      	ldr	r3, [pc, #144]	; (8000598 <stm_i2c_config+0x148>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	b292      	uxth	r2, r2
 800050c:	801a      	strh	r2, [r3, #0]
	*ptr_I2C1_CCR = *ptr_I2C1_CCR & ~(1 << 15); /* 100kHz Slow Mode (SM) */
 800050e:	4b23      	ldr	r3, [pc, #140]	; (800059c <stm_i2c_config+0x14c>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	881b      	ldrh	r3, [r3, #0]
 8000514:	b29a      	uxth	r2, r3
 8000516:	4b21      	ldr	r3, [pc, #132]	; (800059c <stm_i2c_config+0x14c>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800051e:	b292      	uxth	r2, r2
 8000520:	801a      	strh	r2, [r3, #0]
	*ptr_I2C1_CCR = (*ptr_I2C1_CCR & ~(0xfff << 0)) | (0x028 << 0); /* (T_high = CCR * T_clk) ==> (CCR = 5000ns/125ns = 40 = 0x28 */
 8000522:	4b1e      	ldr	r3, [pc, #120]	; (800059c <stm_i2c_config+0x14c>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	881b      	ldrh	r3, [r3, #0]
 8000528:	b29b      	uxth	r3, r3
 800052a:	b21b      	sxth	r3, r3
 800052c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000530:	f023 030f 	bic.w	r3, r3, #15
 8000534:	b21b      	sxth	r3, r3
 8000536:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800053a:	b21a      	sxth	r2, r3
 800053c:	4b17      	ldr	r3, [pc, #92]	; (800059c <stm_i2c_config+0x14c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	b292      	uxth	r2, r2
 8000542:	801a      	strh	r2, [r3, #0]
	*ptr_I2C1_TRISE = ((*ptr_I2C1_TRISE) & ~(0b111111 << 0)) | (0b001001 << 0); /* (1000ns/125ns + 1) = 9 */
 8000544:	4b16      	ldr	r3, [pc, #88]	; (80005a0 <stm_i2c_config+0x150>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	881b      	ldrh	r3, [r3, #0]
 800054a:	b29b      	uxth	r3, r3
 800054c:	b21b      	sxth	r3, r3
 800054e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000552:	b21b      	sxth	r3, r3
 8000554:	f043 0309 	orr.w	r3, r3, #9
 8000558:	b21a      	sxth	r2, r3
 800055a:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <stm_i2c_config+0x150>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	b292      	uxth	r2, r2
 8000560:	801a      	strh	r2, [r3, #0]

	/* Enable I2C peripheral after configuration */
	*ptr_I2C1_CR1 |= (1 << 0);
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <stm_i2c_config+0x144>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	881b      	ldrh	r3, [r3, #0]
 8000568:	b29a      	uxth	r2, r3
 800056a:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <stm_i2c_config+0x144>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f042 0201 	orr.w	r2, r2, #1
 8000572:	b292      	uxth	r2, r2
 8000574:	801a      	strh	r2, [r3, #0]
}
 8000576:	bf00      	nop
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	2000001c 	.word	0x2000001c
 8000584:	20000010 	.word	0x20000010
 8000588:	20000020 	.word	0x20000020
 800058c:	20000014 	.word	0x20000014
 8000590:	20000018 	.word	0x20000018
 8000594:	20000024 	.word	0x20000024
 8000598:	20000028 	.word	0x20000028
 800059c:	2000002c 	.word	0x2000002c
 80005a0:	20000030 	.word	0x20000030

080005a4 <stm_enable_clock>:
/**
 * @brief Enable STM CLK for I2C and GPIO peripherals
 * @author LorisRT
 */
void stm_enable_clock(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	stm_clock_config();
 80005a8:	f000 f804 	bl	80005b4 <stm_clock_config>
	stm_peripheral_clock_unable();
 80005ac:	f000 f834 	bl	8000618 <stm_peripheral_clock_unable>
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <stm_clock_config>:
/**
 * @brief Configure STM32 CLK with HSE 8MHz
 * @author LorisRT
 */
static void stm_clock_config(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
	/* Turn ON HSE CLK and wait for output to be stable */
	*ptr_RCC_CR |= (1 << 16);
 80005b8:	4b15      	ldr	r3, [pc, #84]	; (8000610 <stm_clock_config+0x5c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	4b14      	ldr	r3, [pc, #80]	; (8000610 <stm_clock_config+0x5c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80005c6:	601a      	str	r2, [r3, #0]
	while ( (((uint8_t)(*ptr_RCC_CR >> 17)) & (0x01)) == 0x00 );
 80005c8:	bf00      	nop
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <stm_clock_config+0x5c>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	0c5b      	lsrs	r3, r3, #17
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	f003 0301 	and.w	r3, r3, #1
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d0f6      	beq.n	80005ca <stm_clock_config+0x16>

	/* Set HSE CLK as system CLK and wait for hardware indication that HSE has been set*/
	*ptr_RCC_CFGR = (*ptr_RCC_CFGR & ~(0x03 << 0)) | (0x01);
 80005dc:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <stm_clock_config+0x60>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f023 0203 	bic.w	r2, r3, #3
 80005e6:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <stm_clock_config+0x60>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f042 0201 	orr.w	r2, r2, #1
 80005ee:	601a      	str	r2, [r3, #0]
	while ( (((uint8_t)(*ptr_RCC_CFGR >> 2)) & (0x03)) != 0x01 );
 80005f0:	bf00      	nop
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <stm_clock_config+0x60>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	089b      	lsrs	r3, r3, #2
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	f003 0303 	and.w	r3, r3, #3
 8000600:	2b01      	cmp	r3, #1
 8000602:	d1f6      	bne.n	80005f2 <stm_clock_config+0x3e>
}
 8000604:	bf00      	nop
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	20000008 	.word	0x20000008
 8000614:	2000000c 	.word	0x2000000c

08000618 <stm_peripheral_clock_unable>:
/**
 * @brief Enable APB1 CLK for UART and I2C peripherals
 * @author LorisRT
 */
static void stm_peripheral_clock_unable(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
	*ptr_RCC_AHB1ENR |= (1 << 1); /* GPIOB EN */
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <stm_peripheral_clock_unable+0x30>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <stm_peripheral_clock_unable+0x30>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f042 0202 	orr.w	r2, r2, #2
 800062a:	601a      	str	r2, [r3, #0]
	*ptr_RCC_APB1ENR |= (1 << 21); /* I2C1 EN */
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <stm_peripheral_clock_unable+0x34>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <stm_peripheral_clock_unable+0x34>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800063a:	601a      	str	r2, [r3, #0]
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	20000004 	.word	0x20000004
 800064c:	20000000 	.word	0x20000000

08000650 <clear_addr_reg>:
/**
 * @brief Procedure to clear addr once set
 * @author LorisRT
 */
static inline void clear_addr_reg(void)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
	uint16_t dummyReadVar;
	dummyReadVar = *ptr_I2C1_SR1;
 8000656:	4b07      	ldr	r3, [pc, #28]	; (8000674 <clear_addr_reg+0x24>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	80fb      	strh	r3, [r7, #6]
	dummyReadVar = *ptr_I2C1_SR2;
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <clear_addr_reg+0x28>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	80fb      	strh	r3, [r7, #6]
	(void) dummyReadVar;
}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000034 	.word	0x20000034
 8000678:	20000038 	.word	0x20000038

0800067c <main>:
uint16_t var_date;
uint16_t var_month;
uint16_t var_year;

int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0
	/* Handler array definition and initialisation */
	uint8_t buffer_RTC_DS3231[BUFFER_SIZE] = {0};
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	f107 0308 	add.w	r3, r7, #8
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	f8c3 200b 	str.w	r2, [r3, #11]

	/* Clock initisalisation for I2C1 and GPIOB */
	stm_enable_clock();
 8000696:	f7ff ff85 	bl	80005a4 <stm_enable_clock>

	/* I2C1 peripheral configuration and initisalisation */
	stm_i2c_config();
 800069a:	f7ff fed9 	bl	8000450 <stm_i2c_config>
     * ter pointer".
     * For that reason, the RTC DS3231 register pointer is initialised
     * to the first register (00h) before performing a stream read to be sure
     * that the correct data format is saved in the buffer_RTC_DS3231 variable
	 */
	if (STM_I2C_OK != DS3231_I2C_writePointer(RTC_REG_SEC))
 800069e:	2000      	movs	r0, #0
 80006a0:	f7ff fe08 	bl	80002b4 <DS3231_I2C_writePointer>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	f000 8086 	beq.w	80007b8 <main+0x13c>
	{
		for (;;); /* Loop forever is case of fail pointer setting */
 80006ac:	e7fe      	b.n	80006ac <main+0x30>
	 * ("During a multibyte access, when the address pointer reaches the
	 * end of the register space (12h), it wraps around to location 00h")
	 */
	while (STM_I2C_OK == DS3231_I2C_readStream(buffer_RTC_DS3231, BUFFER_SIZE))
	{
		var_seconds = (uint16_t) ((((buffer_RTC_DS3231[0] >> 0) & 0x0f) * 1) + (((buffer_RTC_DS3231[0] >> 4) & 0x0f) * 10));
 80006ae:	793b      	ldrb	r3, [r7, #4]
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	f003 030f 	and.w	r3, r3, #15
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	793b      	ldrb	r3, [r7, #4]
 80006ba:	091b      	lsrs	r3, r3, #4
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	b29b      	uxth	r3, r3
 80006c0:	f003 030f 	and.w	r3, r3, #15
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	4619      	mov	r1, r3
 80006c8:	0089      	lsls	r1, r1, #2
 80006ca:	440b      	add	r3, r1
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	4413      	add	r3, r2
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	4b3d      	ldr	r3, [pc, #244]	; (80007cc <main+0x150>)
 80006d6:	801a      	strh	r2, [r3, #0]
		var_minutes = (uint16_t) ((((buffer_RTC_DS3231[1] >> 0) & 0x0f) * 1) + (((buffer_RTC_DS3231[1] >> 4) & 0x0f) * 10));
 80006d8:	797b      	ldrb	r3, [r7, #5]
 80006da:	b29b      	uxth	r3, r3
 80006dc:	f003 030f 	and.w	r3, r3, #15
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	797b      	ldrb	r3, [r7, #5]
 80006e4:	091b      	lsrs	r3, r3, #4
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	b29b      	uxth	r3, r3
 80006ea:	f003 030f 	and.w	r3, r3, #15
 80006ee:	b29b      	uxth	r3, r3
 80006f0:	4619      	mov	r1, r3
 80006f2:	0089      	lsls	r1, r1, #2
 80006f4:	440b      	add	r3, r1
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	4413      	add	r3, r2
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	4b34      	ldr	r3, [pc, #208]	; (80007d0 <main+0x154>)
 8000700:	801a      	strh	r2, [r3, #0]
		var_hours = (uint16_t) ((((buffer_RTC_DS3231[2] >> 0) & 0x0f) * 1) + (((buffer_RTC_DS3231[2] >> 4) & 0x01) * 10));
 8000702:	79bb      	ldrb	r3, [r7, #6]
 8000704:	b29b      	uxth	r3, r3
 8000706:	f003 030f 	and.w	r3, r3, #15
 800070a:	b29a      	uxth	r2, r3
 800070c:	79bb      	ldrb	r3, [r7, #6]
 800070e:	091b      	lsrs	r3, r3, #4
 8000710:	b2db      	uxtb	r3, r3
 8000712:	b29b      	uxth	r3, r3
 8000714:	f003 0301 	and.w	r3, r3, #1
 8000718:	b29b      	uxth	r3, r3
 800071a:	4619      	mov	r1, r3
 800071c:	0089      	lsls	r1, r1, #2
 800071e:	440b      	add	r3, r1
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	b29b      	uxth	r3, r3
 8000724:	4413      	add	r3, r2
 8000726:	b29a      	uxth	r2, r3
 8000728:	4b2a      	ldr	r3, [pc, #168]	; (80007d4 <main+0x158>)
 800072a:	801a      	strh	r2, [r3, #0]
		var_day = (uint16_t) ((buffer_RTC_DS3231[3] >> 0) & 0x07);
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	b29b      	uxth	r3, r3
 8000730:	f003 0307 	and.w	r3, r3, #7
 8000734:	b29a      	uxth	r2, r3
 8000736:	4b28      	ldr	r3, [pc, #160]	; (80007d8 <main+0x15c>)
 8000738:	801a      	strh	r2, [r3, #0]
		var_date = (uint16_t) ((((buffer_RTC_DS3231[4] >> 0) & 0x0f) * 1) + (((buffer_RTC_DS3231[4] >> 4) & 0x03) * 10));
 800073a:	7a3b      	ldrb	r3, [r7, #8]
 800073c:	b29b      	uxth	r3, r3
 800073e:	f003 030f 	and.w	r3, r3, #15
 8000742:	b29a      	uxth	r2, r3
 8000744:	7a3b      	ldrb	r3, [r7, #8]
 8000746:	091b      	lsrs	r3, r3, #4
 8000748:	b2db      	uxtb	r3, r3
 800074a:	b29b      	uxth	r3, r3
 800074c:	f003 0303 	and.w	r3, r3, #3
 8000750:	b29b      	uxth	r3, r3
 8000752:	4619      	mov	r1, r3
 8000754:	0089      	lsls	r1, r1, #2
 8000756:	440b      	add	r3, r1
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	b29b      	uxth	r3, r3
 800075c:	4413      	add	r3, r2
 800075e:	b29a      	uxth	r2, r3
 8000760:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <main+0x160>)
 8000762:	801a      	strh	r2, [r3, #0]
		var_month = (uint16_t) ((((buffer_RTC_DS3231[5] >> 0) & 0x0f) * 1) + (((buffer_RTC_DS3231[5] >> 4) & 0x01) * 10));
 8000764:	7a7b      	ldrb	r3, [r7, #9]
 8000766:	b29b      	uxth	r3, r3
 8000768:	f003 030f 	and.w	r3, r3, #15
 800076c:	b29a      	uxth	r2, r3
 800076e:	7a7b      	ldrb	r3, [r7, #9]
 8000770:	091b      	lsrs	r3, r3, #4
 8000772:	b2db      	uxtb	r3, r3
 8000774:	b29b      	uxth	r3, r3
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	b29b      	uxth	r3, r3
 800077c:	4619      	mov	r1, r3
 800077e:	0089      	lsls	r1, r1, #2
 8000780:	440b      	add	r3, r1
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	b29b      	uxth	r3, r3
 8000786:	4413      	add	r3, r2
 8000788:	b29a      	uxth	r2, r3
 800078a:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <main+0x164>)
 800078c:	801a      	strh	r2, [r3, #0]
		var_year = (uint16_t) ((((buffer_RTC_DS3231[6] >> 0) & 0x0f) * 1) + (((buffer_RTC_DS3231[6] >> 4) & 0x0f) * 10));
 800078e:	7abb      	ldrb	r3, [r7, #10]
 8000790:	b29b      	uxth	r3, r3
 8000792:	f003 030f 	and.w	r3, r3, #15
 8000796:	b29a      	uxth	r2, r3
 8000798:	7abb      	ldrb	r3, [r7, #10]
 800079a:	091b      	lsrs	r3, r3, #4
 800079c:	b2db      	uxtb	r3, r3
 800079e:	b29b      	uxth	r3, r3
 80007a0:	f003 030f 	and.w	r3, r3, #15
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	4619      	mov	r1, r3
 80007a8:	0089      	lsls	r1, r1, #2
 80007aa:	440b      	add	r3, r1
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	4413      	add	r3, r2
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <main+0x168>)
 80007b6:	801a      	strh	r2, [r3, #0]
	while (STM_I2C_OK == DS3231_I2C_readStream(buffer_RTC_DS3231, BUFFER_SIZE))
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2113      	movs	r1, #19
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff fd13 	bl	80001e8 <DS3231_I2C_readStream>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	f43f af72 	beq.w	80006ae <main+0x32>

    /**
     * Loop forever:
     * Should never get here, otherwise error during communication
     */
	for(;;);
 80007ca:	e7fe      	b.n	80007ca <main+0x14e>
 80007cc:	2000005c 	.word	0x2000005c
 80007d0:	2000005e 	.word	0x2000005e
 80007d4:	20000060 	.word	0x20000060
 80007d8:	20000062 	.word	0x20000062
 80007dc:	20000064 	.word	0x20000064
 80007e0:	20000066 	.word	0x20000066
 80007e4:	20000068 	.word	0x20000068

080007e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007e8:	480d      	ldr	r0, [pc, #52]	; (8000820 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f0:	480c      	ldr	r0, [pc, #48]	; (8000824 <LoopForever+0x6>)
  ldr r1, =_edata
 80007f2:	490d      	ldr	r1, [pc, #52]	; (8000828 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007f4:	4a0d      	ldr	r2, [pc, #52]	; (800082c <LoopForever+0xe>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f8:	e002      	b.n	8000800 <LoopCopyDataInit>

080007fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fe:	3304      	adds	r3, #4

08000800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000804:	d3f9      	bcc.n	80007fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000806:	4a0a      	ldr	r2, [pc, #40]	; (8000830 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000808:	4c0a      	ldr	r4, [pc, #40]	; (8000834 <LoopForever+0x16>)
  movs r3, #0
 800080a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800080c:	e001      	b.n	8000812 <LoopFillZerobss>

0800080e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000810:	3204      	adds	r2, #4

08000812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000814:	d3fb      	bcc.n	800080e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000816:	f000 f811 	bl	800083c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800081a:	f7ff ff2f 	bl	800067c <main>

0800081e <LoopForever>:

LoopForever:
    b LoopForever
 800081e:	e7fe      	b.n	800081e <LoopForever>
  ldr   r0, =_estack
 8000820:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000828:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 800082c:	080008a4 	.word	0x080008a4
  ldr r2, =_sbss
 8000830:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8000834:	2000006c 	.word	0x2000006c

08000838 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000838:	e7fe      	b.n	8000838 <ADC_IRQHandler>
	...

0800083c <__libc_init_array>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	4d0d      	ldr	r5, [pc, #52]	; (8000874 <__libc_init_array+0x38>)
 8000840:	4c0d      	ldr	r4, [pc, #52]	; (8000878 <__libc_init_array+0x3c>)
 8000842:	1b64      	subs	r4, r4, r5
 8000844:	10a4      	asrs	r4, r4, #2
 8000846:	2600      	movs	r6, #0
 8000848:	42a6      	cmp	r6, r4
 800084a:	d109      	bne.n	8000860 <__libc_init_array+0x24>
 800084c:	4d0b      	ldr	r5, [pc, #44]	; (800087c <__libc_init_array+0x40>)
 800084e:	4c0c      	ldr	r4, [pc, #48]	; (8000880 <__libc_init_array+0x44>)
 8000850:	f000 f818 	bl	8000884 <_init>
 8000854:	1b64      	subs	r4, r4, r5
 8000856:	10a4      	asrs	r4, r4, #2
 8000858:	2600      	movs	r6, #0
 800085a:	42a6      	cmp	r6, r4
 800085c:	d105      	bne.n	800086a <__libc_init_array+0x2e>
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f855 3b04 	ldr.w	r3, [r5], #4
 8000864:	4798      	blx	r3
 8000866:	3601      	adds	r6, #1
 8000868:	e7ee      	b.n	8000848 <__libc_init_array+0xc>
 800086a:	f855 3b04 	ldr.w	r3, [r5], #4
 800086e:	4798      	blx	r3
 8000870:	3601      	adds	r6, #1
 8000872:	e7f2      	b.n	800085a <__libc_init_array+0x1e>
 8000874:	0800089c 	.word	0x0800089c
 8000878:	0800089c 	.word	0x0800089c
 800087c:	0800089c 	.word	0x0800089c
 8000880:	080008a0 	.word	0x080008a0

08000884 <_init>:
 8000884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000886:	bf00      	nop
 8000888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800088a:	bc08      	pop	{r3}
 800088c:	469e      	mov	lr, r3
 800088e:	4770      	bx	lr

08000890 <_fini>:
 8000890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000892:	bf00      	nop
 8000894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000896:	bc08      	pop	{r3}
 8000898:	469e      	mov	lr, r3
 800089a:	4770      	bx	lr
